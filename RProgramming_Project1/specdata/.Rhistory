datadir<-"~specdata"
files<-list.files(path=datadir)
datadir<-"~/Born To Code/R Programming/RProgramming_Project1/specdata"
files<-list.files(path=datadir)
setwd(datadir)
dat001<-read.csv(files[1],header=TRUE)
null_vec<-rep(0,length(files))
nobs<-rep(0,length(files))
?df
?data.frame
response<-data.frame(id,nobs)
id = 1:332
response<-data.frame(id,nobs)
View(response)
for (f in files){}
for (f in files){print(f)}
View(dat001)
dat001<-dat001[which(!is.na(temp.vector))]
temp.vector<-dat001[,2]*dat001[,3]
cdat001<-dat001[which(!is.na(temp.vector))]
cdat001<-dat001[which(!is.na(temp.vector)),]
cdat001<-dat001[which(!is.na(dat001[,2]*dat001[,3])),]
a<-dim(cdat001)
a[1]
res<-data.frame(id,nobs)
res[1,2]<-dim(cdat[,1])[1]
res[1,2]<-dim(cdat001[,1])[1]
res[1,2]<-dim(cdat001)[1]
res
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
# So let's set the directory to our data folder
setwd(directory)
#We first get a list of the files
files<-list.files(path=directory)
#Creation of the data frame
nobs<-rep(0,length(files))
response<-data.frame(id,nobs)
#Loop for every id
for (f in id){
#We load the corresponding file
temp.data<-read.csv(files[id],header=TRUE)
#We subset all the observation where both of variables are fulfilled (not NA)
clean.data<-temp.data[which(!is.na(temp.data[,2]*temp.data[,3])),]
#We pass the length of the clean dataset to our global data frame
response[f,2]<-dim(clean.data)[1]
}
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
return(response)
}
res<-complete(datadir)
which(files=="002.csv")
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
# So let's set the directory to our data folder
setwd(directory)
#We first get a list of the files
files<-list.files(path=directory)
#Creation of the data frame
nobs<-rep(0,length(files))
response<-data.frame(id,nobs)
#Loop for every id
for (f in files){
#We load the corresponding file
temp.data<-read.csv(f,header=TRUE)
#We subset all the observation where both of variables are fulfilled (not NA)
clean.data<-temp.data[which(!is.na(temp.data[,2]*temp.data[,3])),]
#We pass the length of the clean dataset to our global data frame
response[which(files==f),2]<-dim(clean.data)[1]
}
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
return(response)
}
res<-complete(datadir)
plot(res$id,res$nobs)
plot(res$nobs)
hist(res$nobs)
setwd(datadir)
datadir<-"~/Born To Code/R Programming/RProgramming_Project1/specdata"
files<-list.files(path=datadir)
setwd(datadir)
correlation<-rep(NA,length(files))
?cor
temp.file=files[5]
temp.data<-read.csv(temp.file,header=TRUE)
names(temp.data)
correlation[1]<-cor(temp.data$sulfate,temp.data$nitrate,na.rm=TRUE)
correlation[1]<-cor(temp.data$sulfate,temp.data$nitrate)
correlation[1]<-cor(temp.data$sulfate,temp.data$nitrate,na.rm=TRUE)
correlation[1]<-cor(temp.data$sulfate,temp.data$nitrate,method=""na.or.complete"")
correlation[1]<-cor(temp.data$sulfate,temp.data$nitrate,use=""na.or.complete"")
temp.data$sulfate
temp.data$nitrate
cor(temp.data$sulfate,temp.data$nitrate,use="complete.obs")
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
#Setting directory to the data folder
setwd(directory)
files<-list.files(path=directory)
nobs<-rep(0,length(files))
id<-1:length(files)
#We reuse a part of the complete function to get the number of complete observations
# for each of the files
response<-data.frame(id,nobs)
#Loop for every id
for (f in files){
#We load the corresponding file
temp.data<-read.csv(f,header=TRUE)
#We subset all the observation where both of variables are fulfilled (not NA)
clean.data<-temp.data[which(!is.na(temp.data[,2]*temp.data[,3])),]
#We pass the length of the clean dataset to our global data frame
response[which(files==f),2]<-dim(clean.data)[1]
}
# noNull tells us if all the files had a number of correct observations
# inferior to the threshold
noNull<-FALSE
#We create an empty vector for the correlation
correlation<-rep(NA,length(files))
for (i in length(files)){
if (response$nobs[i]>threshold){
noNull<-TRUE
temp.file<-files[i]
temp.data<-read.csv(temp.file,header=TRUE)
correlation[i]<-cor(temp.data$sulfate,temp.data$nitrate,use="complete.obs")
}
}
return(correlation)
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
}
x<-corr(datadir)
directory<-datadir
#Setting directory to the data folder
setwd(directory)
files<-list.files(path=directory)
nobs<-rep(0,length(files))
datadir<-"~/Born To Code/R Programming/RProgramming_Project1/specdata"
directory<-datadir
#Setting directory to the data folder
setwd(directory)
files<-list.files(path=directory)
nobs<-rep(0,length(files))
id<-1:length(files)
#We reuse a part of the complete function to get the number of complete observations
# for each of the files
response<-data.frame(id,nobs)
#Loop for every id
for (f in files){
#We load the corresponding file
temp.data<-read.csv(f,header=TRUE)
#We subset all the observation where both of variables are fulfilled (not NA)
clean.data<-temp.data[which(!is.na(temp.data[,2]*temp.data[,3])),]
#We pass the length of the clean dataset to our global data frame
response[which(files==f),2]<-dim(clean.data)[1]
}
View(response)
# noNull tells us if all the files had a number of correct observations
# inferior to the threshold
noNull<-FALSE
#We create an empty vector for the correlation
correlation<-rep(NA,length(files))
for (i in length(files)){
if (response$nobs[i]>threshold){
noNull<-TRUE
temp.file<-files[i]
temp.data<-read.csv(temp.file,header=TRUE)
correlation[i]<-cor(temp.data$sulfate,temp.data$nitrate,use="complete.obs")
}
}
threshold<-0
for (i in length(files)){
if (response$nobs[i]>threshold){
noNull<-TRUE
temp.file<-files[i]
temp.data<-read.csv(temp.file,header=TRUE)
correlation[i]<-cor(temp.data$sulfate,temp.data$nitrate,use="complete.obs")
}
}
correlation[i]<-cor(temp.data$sulfate,temp.data$nitrate,use="complete.obs")
correlation[i]
if (response$nobs[1]>threshold){
noNull<-TRUE
temp.file<-files[1]
temp.data<-read.csv(temp.file,header=TRUE)
correlation[1]<-cor(temp.data$sulfate,temp.data$nitrate,use="complete.obs")
}
for (i in 1:length(files)){
if (response$nobs[i]>threshold){
noNull<-TRUE
temp.file<-files[i]
temp.data<-read.csv(temp.file,header=TRUE)
correlation[i]<-cor(temp.data$sulfate,temp.data$nitrate,use="complete.obs")
}
}
hist(correlation)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
files<-list.files(path=directory)
setwd(directory)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
#Exctracting the data from all CSV to a dataset
raw.data <- do.call(rbind, lapply(files, read.csv))
#Aggregating the data with the mean and per given id
agg.poll<-aggregate(data=raw.data,cbind(sulfate,nitrate)~ID,FUN=mean,na.rm=TRUE)
agg.poll<-agg.poll[which(agg.poll$ID%in%id),]
#Just keeping the variable of interest
response<-agg.poll[c("ID",pollutant)]
return(response)
}
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
files<-list.files(path=directory)
setwd(directory)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
#Exctracting the data from all CSV to a dataset
raw.data <- do.call(rbind, lapply(files, read.csv))
#Aggregating the data with the mean and per given id
agg.poll<-aggregate(data=raw.data,cbind(sulfate,nitrate)~ID,FUN=mean,na.rm=TRUE)
agg.poll<-agg.poll[which(agg.poll$ID%in%id),]
#Just keeping the variable of interest
response<-agg.poll[c("ID",pollutant)]
return(response)
}
datadir<-"~/Born To Code/R Programming/RProgramming_Project1/specdata"
pollutant<-"sulfate"
pollutantmean(datadir,pollutant)
hy<-pollutantmean(datadir,pollutant)
hist(hy)
View(hy)
hist(hy$sulfate)
submit()
submit()
source("scriptsubmit.R")
source("submitscript1.R")
